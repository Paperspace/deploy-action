/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/session": {
    /**
     * Get the current session 
     * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
     */
    get: operations["query.auth.session"];
  };
  "/deployments/{id}": {
    /**
     * Get a deployment 
     * @description Fetches a single deployment by deployment ID.
     */
    get: operations["query.deployments.get"];
    /**
     * Delete a deployment 
     * @description Deletes a deployment by deployment ID.
     */
    delete: operations["mutation.deployments.delete"];
  };
  "/deployments": {
    /**
     * List deployments 
     * @description Fetches a list of deployments for a logged in user.
     */
    get: operations["query.deployments.list"];
    /**
     * Upsert a deployment 
     * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
     */
    post: operations["mutation.deployments.upsert"];
  };
  "/deployments/{id}/runs": {
    /**
     * List deployment runs 
     * @description Lists the active deployment runs for a deployment.
     */
    get: operations["query.deploymentRunsrouter.get"];
  };
  "/projects": {
    /**
     * List projects 
     * @description 
     *         List projects. This endpoint supports pagination and sorting.
     */
    get: operations["query.projects.list"];
    /**
     * Create a project 
     * @description Create a project
     */
    post: operations["mutation.projects.create"];
  };
  "/projects/{handle}": {
    /**
     * Get a project by its ID 
     * @description Get a project by its ID.
     */
    get: operations["query.projects.get"];
    /**
     * Update a project 
     * @description Update a project
     */
    put: operations["mutation.projects.update"];
  };
  "/projects/{handle}/deployments": {
    /**
     * List a project's deployments 
     * @description Fetches a list of deployments for a project.
     */
    get: operations["query.projectsDeployments.list"];
  };
  "/projects/{handle}/secrets": {
    /**
     * List a project's secrets 
     * @description Fetches a list of secrets for a project.
     */
    get: operations["query.projectSecrets.list"];
    /**
     * Create a project secret 
     * @description Creates a new secret for a project.
     */
    post: operations["mutation.projectSecrets.create"];
  };
  "/projects/{handle}/secrets/{name}": {
    /**
     * Get a project secret 
     * @description Fetches a secret for a project.
     */
    get: operations["query.projectSecrets.getProjectSecret"];
    /**
     * Delete a project secret 
     * @description Deletes a secret for a project.
     */
    delete: operations["mutation.projectSecrets.delete"];
    /**
     * Update a project secret 
     * @description Update the value of a secret for a project.
     */
    patch: operations["mutation.projectSecrets.update"];
  };
  "/teams/{handle}/secrets": {
    /**
     * List a team's secrets 
     * @description Fetches a list of secrets for a team.
     */
    get: operations["query.teamSecrets.list"];
    /**
     * Create a team secret 
     * @description Creates a new secret for a team.
     */
    post: operations["mutation.teamSecrets.create"];
  };
  "/teams/{handle}/secrets/{name}": {
    /**
     * Get a team secret 
     * @description Fetches a secret for a team.
     */
    get: operations["query.teamSecrets.get"];
    /**
     * Delete a team secret 
     * @description Deletes a secret for a team.
     */
    delete: operations["mutation.teamSecrets.delete"];
    /**
     * Update a team secret 
     * @description Update the value of a secret for a team.
     */
    patch: operations["mutation.teamSecrets.update"];
  };
  "/health": {
    /**
     * Health check 
     * @description Check if the API is healthy.
     */
    get: operations["query.health"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    error: {
      content: {
        "application/json": {
          message: string;
          code: string;
          issues?: ({
              message: string;
            })[];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get the current session 
   * @description Get the current session. If a user is not logged in, this will be null. Otherwise, it will contain the current team and user.
   */
  "query.auth.session": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The current user in the session */
            user: {
              /** @description A numeric ID for the user */
              id: number;
              /** @description A unique handle for the user */
              handle: string;
              /** @description The user's email address */
              email: string;
            };
            /** @description The current team in the session */
            team: {
              /** @description A numeric ID for the team */
              id: number;
              /** @description A unique handle for the team */
              handle: string;
              /** @description The namespace for the team */
              namespace: string;
            };
          } | null;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a deployment 
   * @description Fetches a single deployment by deployment ID.
   */
  "query.deployments.get": {
    parameters: {
      path: {
        /** @description The ID of the deployment to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the deployment */
            name: string;
            /** @description The ID of the deployment */
            id: string;
            /** @description The ID of the project the deployment belongs to */
            projectId: string;
            /** @description The ID of the team the deployment belongs to */
            teamId: string;
            /** @description The unique endpoint for the deployment */
            endpoint: string;
            /**
             * @description The last version hash for the deployment 
             * @default null
             */
            latestSpecHash?: string | null;
            /**
             * Format: date-time 
             * @description The date the deployment was created
             */
            dtCreated: string;
            /**
             * @description The latest deployment configuration. If invalid, null is returned. 
             * @default null
             */
            latestSpec?: ({
              /** @description The ID of the deployment spec */
              id: string;
              /** @description The data for the deployment spec */
              data?: (({
                apiVersion: "v0alpha0" | "latest";
                name: string;
                region?: string;
                command?: (string)[];
                /** Format: uuid */
                containerRegistry?: string;
                env?: ({
                    name: string;
                    value: string;
                  })[];
                /** @default true */
                enabled?: boolean;
                healthChecks?: {
                  liveness?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                  readiness?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                  startup?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                };
                image: string;
                repositories?: {
                  mountPath?: string;
                  dataset: string;
                  repositories: ({
                      url: string;
                      ref?: string;
                      name: string;
                      username?: string;
                      password?: string;
                    })[];
                };
                resources: {
                  instanceType: string;
                  /** @default 1 */
                  replicas?: number;
                  autoscaling?: {
                    maxReplicas: number;
                    enabled?: boolean;
                    metrics: ({
                        /** @enum {string} */
                        metric: "requestDuration";
                        /** @enum {string} */
                        summary: "average";
                        value: number;
                      } | ({
                        /** @enum {string} */
                        metric: "cpu" | "memory";
                        /** @enum {string} */
                        summary: "average";
                        value: number;
                      }))[];
                  };
                };
                models?: ({
                    id: string;
                    path?: string;
                  })[];
                /** @default 80 */
                port?: number;
              }) | ({
                /** @enum {string} */
                apiVersion: "v0alpha1";
                name: string;
                region?: string;
                command: (string)[];
                /** Format: uuid */
                containerRegistry?: string;
                env?: ({
                    name: string;
                    value: string;
                  })[];
                /** @default true */
                enabled?: boolean;
                healthchecks?: {
                  liveness?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                  readiness?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                  startup?: {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    path: string;
                    host?: string;
                    port?: number;
                    headers?: ({
                        name: string;
                        value: string;
                      })[];
                  } | {
                    timeoutSeconds?: number;
                    initialDelaySeconds?: number;
                    periodSeconds?: number;
                    failureThreshold?: number;
                    exec: {
                      command: (string)[];
                    };
                  };
                };
                image: string;
              })) | null;
              /** @description The ID of the deployment the spec belongs to */
              deploymentId: string;
              /**
               * Format: date-time 
               * @description The date the deployment configuration was applied to the cluster 
               * @default null
               */
              externalApplied?: string | null;
              /**
               * Format: date-time 
               * @description The date the deployment was marked "healthy" 
               * @default null
               */
              dtHealthy?: string | null;
              /** @description The ID of the user the deployment belongs to */
              userId: number;
              /**
               * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error. 
               * @default null
               */
              error?: string | null;
            }) | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a deployment 
   * @description Deletes a deployment by deployment ID.
   */
  "mutation.deployments.delete": {
    parameters: {
      path: {
        /** @description The ID of the deployment to delete */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the deleted deployment */
            id: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List deployments 
   * @description Fetches a list of deployments for a logged in user.
   */
  "query.deployments.list": {
    parameters: {
      query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description Whether there are more pages of results available. */
            hasMore: boolean;
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            nextPage: string | null;
            /** @description The items on this page. */
            items: ({
                /** @description The name of the deployment */
                name: string;
                /** @description The ID of the deployment */
                id: string;
                /** @description The ID of the project the deployment belongs to */
                projectId: string;
                /** @description The ID of the team the deployment belongs to */
                teamId: string;
                /** @description The unique endpoint for the deployment */
                endpoint: string;
                /**
                 * @description The last version hash for the deployment 
                 * @default null
                 */
                latestSpecHash?: string | null;
                /**
                 * Format: date-time 
                 * @description The date the deployment was created
                 */
                dtCreated: string;
                /**
                 * @description The latest deployment configuration. If invalid, null is returned. 
                 * @default null
                 */
                latestSpec?: ({
                  /** @description The ID of the deployment spec */
                  id: string;
                  /** @description The data for the deployment spec */
                  data?: (({
                    apiVersion: "v0alpha0" | "latest";
                    name: string;
                    region?: string;
                    command?: (string)[];
                    /** Format: uuid */
                    containerRegistry?: string;
                    env?: ({
                        name: string;
                        value: string;
                      })[];
                    /** @default true */
                    enabled?: boolean;
                    healthChecks?: {
                      liveness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      readiness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      startup?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                    };
                    image: string;
                    repositories?: {
                      mountPath?: string;
                      dataset: string;
                      repositories: ({
                          url: string;
                          ref?: string;
                          name: string;
                          username?: string;
                          password?: string;
                        })[];
                    };
                    resources: {
                      instanceType: string;
                      /** @default 1 */
                      replicas?: number;
                      autoscaling?: {
                        maxReplicas: number;
                        enabled?: boolean;
                        metrics: ({
                            /** @enum {string} */
                            metric: "requestDuration";
                            /** @enum {string} */
                            summary: "average";
                            value: number;
                          } | ({
                            /** @enum {string} */
                            metric: "cpu" | "memory";
                            /** @enum {string} */
                            summary: "average";
                            value: number;
                          }))[];
                      };
                    };
                    models?: ({
                        id: string;
                        path?: string;
                      })[];
                    /** @default 80 */
                    port?: number;
                  }) | ({
                    /** @enum {string} */
                    apiVersion: "v0alpha1";
                    name: string;
                    region?: string;
                    command: (string)[];
                    /** Format: uuid */
                    containerRegistry?: string;
                    env?: ({
                        name: string;
                        value: string;
                      })[];
                    /** @default true */
                    enabled?: boolean;
                    healthchecks?: {
                      liveness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      readiness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      startup?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                    };
                    image: string;
                  })) | null;
                  /** @description The ID of the deployment the spec belongs to */
                  deploymentId: string;
                  /**
                   * Format: date-time 
                   * @description The date the deployment configuration was applied to the cluster 
                   * @default null
                   */
                  externalApplied?: string | null;
                  /**
                   * Format: date-time 
                   * @description The date the deployment was marked "healthy" 
                   * @default null
                   */
                  dtHealthy?: string | null;
                  /** @description The ID of the user the deployment belongs to */
                  userId: number;
                  /**
                   * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error. 
                   * @default null
                   */
                  error?: string | null;
                }) | null;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Upsert a deployment 
   * @description Submit a new deployment configuration. If a deployment does not exist, one is created. Otherwise, a deployment is updated with new configuration.
   */
  "mutation.deployments.upsert": {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The ID of the deployment to update. 
           * @default null
           */
          deploymentId?: string | null;
          /** @description The project ID to deploy resources under. */
          projectId: string;
          /** @description The deployment configuration */
          config: ({
            apiVersion: "v0alpha0" | "latest";
            name: string;
            region?: string;
            command?: (string)[];
            /** Format: uuid */
            containerRegistry?: string;
            env?: ({
                name: string;
                value: string;
              })[];
            /** @default true */
            enabled?: boolean;
            healthChecks?: {
              liveness?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
              readiness?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
              startup?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
            };
            image: string;
            repositories?: {
              mountPath?: string;
              dataset: string;
              repositories: ({
                  url: string;
                  ref?: string;
                  name: string;
                  username?: string;
                  password?: string;
                })[];
            };
            resources: {
              instanceType: string;
              /** @default 1 */
              replicas?: number;
              autoscaling?: {
                maxReplicas: number;
                enabled?: boolean;
                metrics: ({
                    /** @enum {string} */
                    metric: "requestDuration";
                    /** @enum {string} */
                    summary: "average";
                    value: number;
                  } | ({
                    /** @enum {string} */
                    metric: "cpu" | "memory";
                    /** @enum {string} */
                    summary: "average";
                    value: number;
                  }))[];
              };
            };
            models?: ({
                id: string;
                path?: string;
              })[];
            /** @default 80 */
            port?: number;
          }) | ({
            /** @enum {string} */
            apiVersion: "v0alpha1";
            name: string;
            region?: string;
            command: (string)[];
            /** Format: uuid */
            containerRegistry?: string;
            env?: ({
                name: string;
                value: string;
              })[];
            /** @default true */
            enabled?: boolean;
            healthchecks?: {
              liveness?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
              readiness?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
              startup?: {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                path: string;
                host?: string;
                port?: number;
                headers?: ({
                    name: string;
                    value: string;
                  })[];
              } | {
                timeoutSeconds?: number;
                initialDelaySeconds?: number;
                periodSeconds?: number;
                failureThreshold?: number;
                exec: {
                  command: (string)[];
                };
              };
            };
            image: string;
          });
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the deployment */
            deploymentId: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List deployment runs 
   * @description Lists the active deployment runs for a deployment.
   */
  "query.deploymentRunsrouter.get": {
    parameters: {
      query: {
        /** @description The latest n number of deployment runs to return */
        limit?: number;
      };
      path: {
        /** @description The ID of the deployment to fetch */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": ({
              id: string;
              /**
               * @description The amount of replicas that are available but not ready 
               * @default 0
               */
              availableReplicas?: number;
              /**
               * @description The amount of replicas that are ready 
               * @default 0
               */
              readyReplicas?: number;
              /**
               * @description The desired amount of replicas for the deployment run 
               * @default 0
               */
              replicas?: number;
              /** @description The deployment run instances */
              instances: ({
                  /** @description The ID of the deployment instance */
                  id: string;
                  /**
                   * Format: date-time 
                   * @description The date the instance was created
                   */
                  dtCreated: string;
                  /**
                   * Format: date-time 
                   * @description The date the instance was finished 
                   * @default null
                   */
                  dtFinished?: string | null;
                  /** @description The current state of the instance */
                  state: string;
                  /** @description The ID of the deployment instance */
                  instanceId: string;
                  /**
                   * @description The latest state message for the instance 
                   * @default null
                   */
                  stateMessage?: string | null;
                  /** @description The time series state history of the deployment instance */
                  history: ({
                      /** @description The state of the instance at the point in time */
                      state: string;
                      /**
                       * @description The state message from the instance at the point in time 
                       * @default null
                       */
                      message?: string | null;
                      /**
                       * Format: date-time 
                       * @description The timestamp of the state
                       */
                      timestamp: string;
                    })[];
                })[];
            })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List projects 
   * @description 
   *         List projects. This endpoint supports pagination and sorting.
   */
  "query.projects.list": {
    parameters: {
      query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description Whether there are more pages of results available. */
            hasMore: boolean;
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            nextPage: string | null;
            /** @description The items on this page. */
            items: ({
                /** @description The ID of the project */
                handle: string;
                /** @description The name of the project */
                name: string;
                /**
                 * Format: date-time 
                 * @description The date the project was created
                 */
                dtCreated: string;
                /**
                 * Format: date-time 
                 * @description The date the project was deleted 
                 * @default null
                 */
                dtDeleted?: string | null;
                /**
                 * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                repoNodeId?: string | null;
                /**
                 * @description The name of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                repoName?: string | null;
                /**
                 * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
                 * @default null
                 */
                repoUrl?: string | null;
                /**
                 * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
                 * @default null
                 */
                githubAppInstallationId?: number | null;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a project 
   * @description Create a project
   */
  "mutation.projects.create": {
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the project */
          name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the project */
            handle: string;
            /** @description The name of the project */
            name: string;
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            dtDeleted?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoNodeId?: string | null;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoName?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoUrl?: string | null;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            githubAppInstallationId?: number | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a project by its ID 
   * @description Get a project by its ID.
   */
  "query.projects.get": {
    parameters: {
      path: {
        /** @description The ID of the project to get */
        handle: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the project */
            handle: string;
            /** @description The name of the project */
            name: string;
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            dtDeleted?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoNodeId?: string | null;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoName?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoUrl?: string | null;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            githubAppInstallationId?: number | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a project 
   * @description Update a project
   */
  "mutation.projects.update": {
    parameters: {
      path: {
        /** @description The ID of the project to update */
        handle: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The new name of the project */
          name: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The ID of the project */
            handle: string;
            /** @description The name of the project */
            name: string;
            /**
             * Format: date-time 
             * @description The date the project was created
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the project was deleted 
             * @default null
             */
            dtDeleted?: string | null;
            /**
             * @description The node ID of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoNodeId?: string | null;
            /**
             * @description The name of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoName?: string | null;
            /**
             * @description The URL of the GitHub repository if this is is a GitHub-connected project. 
             * @default null
             */
            repoUrl?: string | null;
            /**
             * @description The ID of the GitHub App installation if this is is a GitHub-connected project. 
             * @default null
             */
            githubAppInstallationId?: number | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's deployments 
   * @description Fetches a list of deployments for a project.
   */
  "query.projectsDeployments.list": {
    parameters: {
      query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
        /** @description The name of the deployment to filter by */
        name?: string;
      };
      path: {
        /** @description The ID of the project to fetch deployments for */
        handle: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description Whether there are more pages of results available. */
            hasMore: boolean;
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            nextPage: string | null;
            /** @description The items on this page. */
            items: ({
                /** @description The name of the deployment */
                name: string;
                /** @description The ID of the deployment */
                id: string;
                /** @description The ID of the project the deployment belongs to */
                projectId: string;
                /** @description The ID of the team the deployment belongs to */
                teamId: string;
                /** @description The unique endpoint for the deployment */
                endpoint: string;
                /**
                 * @description The last version hash for the deployment 
                 * @default null
                 */
                latestSpecHash?: string | null;
                /**
                 * Format: date-time 
                 * @description The date the deployment was created
                 */
                dtCreated: string;
                /**
                 * @description The latest deployment configuration. If invalid, null is returned. 
                 * @default null
                 */
                latestSpec?: ({
                  /** @description The ID of the deployment spec */
                  id: string;
                  /** @description The data for the deployment spec */
                  data?: (({
                    apiVersion: "v0alpha0" | "latest";
                    name: string;
                    region?: string;
                    command?: (string)[];
                    /** Format: uuid */
                    containerRegistry?: string;
                    env?: ({
                        name: string;
                        value: string;
                      })[];
                    /** @default true */
                    enabled?: boolean;
                    healthChecks?: {
                      liveness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      readiness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      startup?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                    };
                    image: string;
                    repositories?: {
                      mountPath?: string;
                      dataset: string;
                      repositories: ({
                          url: string;
                          ref?: string;
                          name: string;
                          username?: string;
                          password?: string;
                        })[];
                    };
                    resources: {
                      instanceType: string;
                      /** @default 1 */
                      replicas?: number;
                      autoscaling?: {
                        maxReplicas: number;
                        enabled?: boolean;
                        metrics: ({
                            /** @enum {string} */
                            metric: "requestDuration";
                            /** @enum {string} */
                            summary: "average";
                            value: number;
                          } | ({
                            /** @enum {string} */
                            metric: "cpu" | "memory";
                            /** @enum {string} */
                            summary: "average";
                            value: number;
                          }))[];
                      };
                    };
                    models?: ({
                        id: string;
                        path?: string;
                      })[];
                    /** @default 80 */
                    port?: number;
                  }) | ({
                    /** @enum {string} */
                    apiVersion: "v0alpha1";
                    name: string;
                    region?: string;
                    command: (string)[];
                    /** Format: uuid */
                    containerRegistry?: string;
                    env?: ({
                        name: string;
                        value: string;
                      })[];
                    /** @default true */
                    enabled?: boolean;
                    healthchecks?: {
                      liveness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      readiness?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                      startup?: {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        path: string;
                        host?: string;
                        port?: number;
                        headers?: ({
                            name: string;
                            value: string;
                          })[];
                      } | {
                        timeoutSeconds?: number;
                        initialDelaySeconds?: number;
                        periodSeconds?: number;
                        failureThreshold?: number;
                        exec: {
                          command: (string)[];
                        };
                      };
                    };
                    image: string;
                  })) | null;
                  /** @description The ID of the deployment the spec belongs to */
                  deploymentId: string;
                  /**
                   * Format: date-time 
                   * @description The date the deployment configuration was applied to the cluster 
                   * @default null
                   */
                  externalApplied?: string | null;
                  /**
                   * Format: date-time 
                   * @description The date the deployment was marked "healthy" 
                   * @default null
                   */
                  dtHealthy?: string | null;
                  /** @description The ID of the user the deployment belongs to */
                  userId: number;
                  /**
                   * @description The fatal configuration error. Only present if the cluster was unable to apply the entire deployment configuration. This is not the same as an instance error. 
                   * @default null
                   */
                  error?: string | null;
                }) | null;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a project's secrets 
   * @description Fetches a list of secrets for a project.
   */
  "query.projectSecrets.list": {
    parameters: {
      query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      path: {
        /** @description The ID of the project where the secret is stored. */
        handle: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description Whether there are more pages of results available. */
            hasMore: boolean;
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            nextPage: string | null;
            /** @description The items on this page. */
            items: ({
                /** @description The name of the secret, e.g. "DB_PASSWORD". */
                name: string;
                /**
                 * Format: date-time 
                 * @description The date the secret was created.
                 */
                dtCreated: string;
                /**
                 * Format: date-time 
                 * @description The date the secret was last modified.
                 */
                dtModified: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a project secret 
   * @description Creates a new secret for a project.
   */
  "mutation.projectSecrets.create": {
    parameters: {
      path: {
        /** @description The ID of the project where the secret is stored. */
        handle: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the secret, e.g. "DB_PASSWORD". */
          name: string;
          /** @description The value of the secret, e.g. "password". */
          value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a project secret 
   * @description Fetches a secret for a project.
   */
  "query.projectSecrets.getProjectSecret": {
    parameters: {
      path: {
        /** @description The ID of the project where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a project secret 
   * @description Deletes a secret for a project.
   */
  "mutation.projectSecrets.delete": {
    parameters: {
      path: {
        /** @description The ID of the project where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a project secret 
   * @description Update the value of a secret for a project.
   */
  "mutation.projectSecrets.update": {
    parameters: {
      path: {
        /** @description The ID of the project where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The value of the secret, e.g. "password". */
          value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List a team's secrets 
   * @description Fetches a list of secrets for a team.
   */
  "query.teamSecrets.list": {
    parameters: {
      query: {
        /** @description Fetch the next page of results after this cursor. */
        after?: string;
        /** @description The number of items to fetch after this page. */
        limit?: number;
        /** @description Order results by one of these fields. */
        orderBy?: "dtCreated";
        /** @description The order to sort the results by. */
        order?: "asc" | "desc";
      };
      path: {
        /** @description The ID of the team where the secret is stored. */
        handle: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description Whether there are more pages of results available. */
            hasMore: boolean;
            /** @description The cursor required to fetch the next page of results. i.e. `?after=nextPage`. This is `null` when there is no next page. */
            nextPage: string | null;
            /** @description The items on this page. */
            items: ({
                /** @description The name of the secret, e.g. "DB_PASSWORD". */
                name: string;
                /**
                 * Format: date-time 
                 * @description The date the secret was created.
                 */
                dtCreated: string;
                /**
                 * Format: date-time 
                 * @description The date the secret was last modified.
                 */
                dtModified: string;
              })[];
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create a team secret 
   * @description Creates a new secret for a team.
   */
  "mutation.teamSecrets.create": {
    parameters: {
      path: {
        /** @description The ID of the team where the secret is stored. */
        handle: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the secret, e.g. "DB_PASSWORD". */
          name: string;
          /** @description The value of the secret, e.g. "password". */
          value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get a team secret 
   * @description Fetches a secret for a team.
   */
  "query.teamSecrets.get": {
    parameters: {
      path: {
        /** @description The ID of the team where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete a team secret 
   * @description Deletes a secret for a team.
   */
  "mutation.teamSecrets.delete": {
    parameters: {
      path: {
        /** @description The ID of the team where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update a team secret 
   * @description Update the value of a secret for a team.
   */
  "mutation.teamSecrets.update": {
    parameters: {
      path: {
        /** @description The ID of the team where the secret is stored. */
        handle: string;
        /** @description The name of the secret, e.g. "DB_PASSWORD". */
        name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The value of the secret, e.g. "password". */
          value: string;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the secret, e.g. "DB_PASSWORD". */
            name: string;
            /**
             * Format: date-time 
             * @description The date the secret was created.
             */
            dtCreated: string;
            /**
             * Format: date-time 
             * @description The date the secret was last modified.
             */
            dtModified: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Health check 
   * @description Check if the API is healthy.
   */
  "query.health": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": "HEALTHY";
        };
      };
      default: components["responses"]["error"];
    };
  };
}
